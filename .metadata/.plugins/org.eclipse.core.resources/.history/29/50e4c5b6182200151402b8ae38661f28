

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import javax.security.auth.login.LoginException;

import exceptions.DadoInvalidoException;
import exceptions.DowngradeInvalidoException;
import exceptions.EntradaException;
import exceptions.LogicaExcpetion;
import exceptions.SaldoInsuficienteException;
import exceptions.StringInvalidaException;
import exceptions.TipoJogoException;
import exceptions.TipoUsuarioException;
import exceptions.UpgradeInvalidoException;
import exceptions.UsuarioInexistenteException;

public class Loja {
	
	private ArrayList<Usuario> usuarios;
	private double totalArrecadado;
	private Controller controller;
	
	public Loja(){
		usuarios = new ArrayList<Usuario>();
		totalArrecadado = 0;
		controller = new Controller();
	}
	
	public void armazenaUsuario(String nome, String login, List jogosComprados, double dinheiro, String tipo) throws TipoUsuarioException, EntradaException {
	//	try {
			Usuario usuario = controller.novoUsuario(nome, login, jogosComprados, dinheiro, tipo);
			usuarios.add(usuario);
	/*	} catch (StringInvalidaException e) {
			System.out.println(e.getMessage());
		} catch (DadoInvalidoException e) {
			System.out.println(e.getMessage());
		} catch (TipoUsuarioException e) {
			System.out.println(e.getMessage());
		} */
	}
	
	
	public void addDinheiro(Usuario usuario, double dinheiroAdicional){
		usuario.setDinheiro( usuario.getDinheiro() + dinheiroAdicional );
	}
	
	public void calcTotalArrecadado(double valorVenda){
		this.totalArrecadado = this.totalArrecadado + valorVenda;
	}
	
	public void upgrade(String login) throws LogicaExcpetion, EntradaException, UpgradeInvalidoException {
		
		for (Usuario usuario: usuarios) {
			if (usuario.getLogin().equals(login)){
			
				if (usuario instanceof Veterano) {
					
					throw new UpgradeInvalidoException(usuario.getNome());
				} else if (usuario.getX2p() < 1000) {
					
					throw new UpgradeInvalidoException();			
				} else {
				
					String nomeUsuario = usuario.getNome();
					String loginUsuario = usuario.getLogin();
					double dinheiroUsuario = usuario.getDinheiro();
					List<Jogo> jogosUsuario = usuario.getJogosComprados();
					int x2pUsuario = usuario.getX2p();
					
					Usuario novoUsuario = fabricaUsuario.criaUsuarioVeterano(nomeUsuario, loginUsuario, jogosUsuario, dinheiroUsuario);
					novoUsuario.setX2p(x2pUsuario);
				
					usuarios.remove(usuario);
					usuarios.add(novoUsuario);
				}
				
			} else {
				throw new UsuarioInexistenteException();
			}
		} // encerra loop	
	}
	
	public void downgrade(String login) throws  DowngradeInvalidoException, EntradaException, UsuarioInexistenteException {
		
		for (Usuario usuario: usuarios) {
			if (usuario.getLogin().equals(login)){
			
				if (usuario instanceof Noob) {
					throw new DowngradeInvalidoException(usuario.getNome());
				} else if (usuario.getX2p() >= 1000) {
					throw new DowngradeInvalidoException();
				} else {
					String nomeUsuario = usuario.getNome();
					String loginUsuario = usuario.getLogin();
					double dinheiroUsuario = usuario.getDinheiro();
					List<Jogo> jogosUsuario = usuario.getJogosComprados();
					int x2pUsuario = usuario.getX2p();
					
					Usuario novoUsuario = fabricaUsuario.criaUsuarioNoob(nomeUsuario, loginUsuario, jogosUsuario, dinheiroUsuario);

					novoUsuario.setX2p(x2pUsuario);
				
					usuarios.remove(usuario);
					usuarios.add(novoUsuario);
				}
				
			} else {
				throw new UsuarioInexistenteException();
			}
		} // encerra loop	
	}	
	
	public String toString(){
		StringBuffer sb = new StringBuffer();
		final String endOfLine = System.getProperty("line.separator");		
		
		sb.append("=== Central P2-CG ===");
		sb.append(endOfLine);
		sb.append(endOfLine);
		
		for (Usuario usuario : usuarios) {
			sb.append(usuario);
			sb.append(endOfLine);
			sb.append(endOfLine);
		}
		
		sb.append(endOfLine);
		sb.append("--------------------------------");
		sb.append("Total arrecadado com vendas de jogos: R$ ");
		sb.append(totalArrecadado);
		return sb.toString();
	}
}